import { TutorialIdea } from './analyzer';

export class MarkdownGenerator {
  generateScaffold(tutorial: TutorialIdea): string {
    const sections = [
      this.generateHeader(tutorial),
      this.generateOverview(tutorial),
      this.generateTutorialInfo(tutorial),
      this.generatePrerequisites(tutorial),
      this.generateLearningObjectives(tutorial),
      this.generateOutline(tutorial),
      this.generateResources(tutorial),
      this.generateDevelopmentNotes(tutorial),
    ];

    return sections.join('\n\n');
  }

  private generateHeader(tutorial: TutorialIdea): string {
    return `# ${tutorial.title}

> **Status:** Draft Scaffold
> **Difficulty:** ${tutorial.difficulty}
> **Estimated Time:** ${tutorial.estimatedTime}
> **Estimated Creation Cost:** $${tutorial.estimatedCost}`;
  }

  private generateOverview(tutorial: TutorialIdea): string {
    return `## Overview

${tutorial.summary}`;
  }

  private generateTutorialInfo(tutorial: TutorialIdea): string {
    return `## Tutorial Information

- **Target Audience:** ${tutorial.difficulty} developers
- **Format:** Step-by-step guide with code examples
- **Time to Complete:** ${tutorial.estimatedTime}`;
  }

  private generatePrerequisites(tutorial: TutorialIdea): string {
    const items = tutorial.prerequisites.map(p => `- ${p}`).join('\n');
    return `## Prerequisites

Before starting this tutorial, you should have:

${items}`;
  }

  private generateLearningObjectives(tutorial: TutorialIdea): string {
    const items = tutorial.learningObjectives.map(obj => `- ${obj}`).join('\n');
    return `## What You'll Learn

By the end of this tutorial, you will be able to:

${items}`;
  }

  private generateOutline(tutorial: TutorialIdea): string {
    const sections = tutorial.outline.map((section, idx) => {
      const topics = section.topics.map(t => `  - ${t}`).join('\n');
      return `### ${idx + 1}. ${section.title}

${section.description}

**Topics covered:**
${topics}

**[TODO: Expand this section with:]**
- Detailed explanation of concepts
- Step-by-step instructions
- Code examples with comments
- Screenshots or diagrams (if applicable)
- Common pitfalls and troubleshooting

\`\`\`
[Code example placeholder]
\`\`\`

**Expected outcome:** [Describe what the learner should have accomplished]`;
    }).join('\n\n');

    return `## Tutorial Outline

${sections}`;
  }

  private generateResources(tutorial: TutorialIdea): string {
    const links = tutorial.resources.map(url => `- [Official Documentation](${url})`).join('\n');
    return `## Additional Resources

${links}

**Further reading:**
- [TODO: Add related articles, videos, or documentation]
- [TODO: Add community resources or forums]
- [TODO: Add related tutorials for next steps]`;
  }

  private generateDevelopmentNotes(tutorial: TutorialIdea): string {
    return `## Development Notes

**For tutorial creators:**

This scaffold provides the structure for your tutorial. To complete it:

1. **Expand each section** with detailed content
2. **Add working code examples** that can be copied and run
3. **Include visual aids** (screenshots, diagrams, GIFs)
4. **Test all code** to ensure it works as expected
5. **Add troubleshooting tips** for common issues
6. **Review and edit** for clarity and completeness

**Quality checklist:**
- [ ] All code examples are tested and work
- [ ] Steps are in logical order
- [ ] Complex concepts are explained clearly
- [ ] Prerequisites are accurate
- [ ] Learning objectives are met
- [ ] Resources are current and accessible
- [ ] Tutorial is proofread and polished

**Estimated effort breakdown:**
- Content writing: ${Math.floor(tutorial.estimatedCost * 0.5)} (50%)
- Code examples: ${Math.floor(tutorial.estimatedCost * 0.25)} (25%)
- Visuals and polish: ${Math.floor(tutorial.estimatedCost * 0.25)} (25%)

---

*Generated by Tutorial Generator | Status: Scaffold | Ready for development*`;
  }

  generateFilename(title: string, index: number): string {
    const slug = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$/g, '');
    return `tutorial-${index + 1}-${slug}.md`;
  }
}
